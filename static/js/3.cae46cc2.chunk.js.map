{"version":3,"sources":["components/Thumbnail/Thumbnail.tsx","components/PostInfo/PostInfo.tsx"],"names":["Thumbnail","thumbnail","className","src","alt","React","memo","PostInfo","data","useState","posts","setPosts","display","setDisplay","loading","setLoading","handleLazy","window","scrollY","innerHeight","pageYOffset","document","documentElement","offsetHeight","useEffect","addEventListener","removeEventListener","slice","prev","length","map","post","index","owner","picture","firstName","lastName","likes","Date","publishDate","toLocaleDateString","tags","text","image","id","style","onClick","scrollTo","textAlign"],"mappings":"+MAGA,SAASA,EAAT,GAA0D,IAArCC,EAAoC,EAApCA,UACnB,OACE,qBAAKC,UAAU,YAAf,SACE,qBAAKC,IAAKF,EAAWG,IAAI,gBAKhBC,UAAMC,KAAKN,GCL1B,SAASO,EAAT,GAA6B,IAATC,EAAQ,EAARA,KAAQ,EACAC,mBAAkB,IADlB,mBACnBC,EADmB,KACZC,EADY,OAEIF,mBAAS,QAFb,mBAEnBG,EAFmB,KAEVC,EAFU,OAGIJ,oBAAS,GAHb,mBAGnBK,EAHmB,KAGVC,EAHU,KAuB1B,SAASC,IACNC,OAAOC,QAA+BL,EAAW,SAAhCA,EAAW,QAE3BI,OAAOE,YAAcF,OAAOG,YAAc,IAC1CC,SAASC,gBAAgBC,cAG3BR,GAAW,GAIb,OA5BAS,qBAAU,WAER,OADAP,OAAOQ,iBAAiB,SAAUT,GAC3B,kBAAMC,OAAOS,oBAAoB,SAAUV,MACjD,IAEHQ,qBAAU,WACRb,EAASH,EAAKmB,MAAM,EAAG,OACtB,CAACnB,IAEJgB,qBAAU,WACHV,IACLH,GAAS,SAAAiB,GACP,MAAM,GAAN,mBAAWA,GAAX,YAAoBpB,EAAKmB,MAAMC,EAAKC,OAAQ,GAAKD,EAAKC,aAExDd,GAAW,MACV,CAACD,EAASN,IAaRE,EAAMmB,OAIT,qCACGnB,EAAMoB,KAAI,SAACC,EAAaC,GAAd,OACT,sBAAK9B,UAAU,iBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,QAAf,UACE,cAAC,EAAD,CAAWD,UAAW8B,EAAKE,MAAMC,UACjC,+BACGH,EAAKE,MAAME,UADd,IAC0BJ,EAAKE,MAAMG,eAGvC,qBAAKlC,UAAU,YAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,iCACE,mBAAGA,UAAU,gBADf,IACmC6B,EAAKM,SAExC,iDACgB,IACb,IAAIC,KAAKP,EAAKQ,aAAaC,6BAIjCT,EAAKU,KAAKZ,OAAS,GAClB,qBAAK3B,UAAU,SAAf,SACG6B,EAAKU,KAAKX,KAAI,SAACW,EAAMT,GAAP,OACb,4BAAgBS,GAART,QAKd,4BAAID,EAAKW,UAEX,qBAAKxC,UAAU,aAAaC,IAAK4B,EAAKY,MAAOvC,IAAI,WA7Bd2B,EAAKa,OAiC5C,qBAAKC,MAAO,CAAEjC,WAAWV,UAAU,aAAnC,SACE,wBAAQ4C,QAAS,kBAAM7B,OAAO8B,SAAS,EAAG,IAAI7C,UAAU,MAAxD,SACE,mBAAGA,UAAU,8BAxCZ,oBAAI2C,MAAO,CAAEG,UAAW,UAAxB,2BA+CI3C,cAAMC,KAAKC","file":"static/js/3.cae46cc2.chunk.js","sourcesContent":["import \"./Thumbnail.css\";\r\nimport React from \"react\";\r\n\r\nfunction Thumbnail({ thumbnail }: { thumbnail: string }) {\r\n  return (\r\n    <div className=\"thumbnail\">\r\n      <img src={thumbnail} alt=\"thumbnail\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Thumbnail);\r\n","import \"./PostInfo.css\";\nimport Thumbnail from \"../Thumbnail/Thumbnail\";\nimport { Posts } from \"../../interface/Posts\";\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\n\nfunction PostInfo({ data }) {\n  const [posts, setPosts] = useState<Posts[]>([]);\n  const [display, setDisplay] = useState(\"none\");\n  const [loading, setLoading] = useState(false);\n\n  // Lazy loading starts here\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleLazy);\n    return () => window.removeEventListener(\"scroll\", handleLazy);\n  }, []);\n\n  useEffect(() => {\n    setPosts(data.slice(0, 10));\n  }, [data]);\n\n  useEffect(() => {\n    if (!loading) return;\n    setPosts(prev => {\n      return [...prev, ...data.slice(prev.length, 10 + prev.length)];\n    });\n    setLoading(false);\n  }, [loading, data]);\n\n  function handleLazy() {\n    !window.scrollY ? setDisplay(\"none\") : setDisplay(\"block\");\n    if (\n      window.innerHeight + window.pageYOffset + 100 <\n      document.documentElement.offsetHeight\n    )\n      return;\n    setLoading(true);\n  }\n\n  // If no posts exist we display no results.\n  if (!posts.length)\n    return <h2 style={{ textAlign: \"center\" }}>No results...</h2>;\n\n  return (\n    <>\n      {posts.map((post: Posts, index: number) => (\n        <div className=\"flex-container\" key={post.id}>\n          <div className=\"post-container\">\n            <div className=\"owner\">\n              <Thumbnail thumbnail={post.owner.picture} />\n              <h2>\n                {post.owner.firstName} {post.owner.lastName}\n              </h2>\n            </div>\n            <div className=\"post-info\">\n              <div className=\"image-subtext\">\n                <span>\n                  <i className=\"bx bxs-like\"></i> {post.likes}\n                </span>\n                <span>\n                  Publish Date:{\" \"}\n                  {new Date(post.publishDate).toLocaleDateString()}\n                </span>\n              </div>\n            </div>\n            {post.tags.length > 0 && (\n              <div className=\"tagbar\">\n                {post.tags.map((tags, index) => (\n                  <p key={index}>{tags}</p>\n                ))}\n              </div>\n            )}\n\n            <p>{post.text}</p>\n          </div>\n          <img className=\"post-image\" src={post.image} alt=\"post\" />\n        </div>\n      ))}\n\n      <div style={{ display }} className=\"scroll-top\">\n        <button onClick={() => window.scrollTo(0, 0)} className=\"top\">\n          <i className=\"bx bxs-chevrons-up\"></i>\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default React.memo(PostInfo);\n"],"sourceRoot":""}